{"ast":null,"code":"import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Address from \"./Address.js\";\nimport \"./App.css\";\n\nclass App extends Component {// state = { storageValue: 0, web3: null, accounts: null, contract: null, addresses: null };\n  //\n  // componentDidMount = async () => {\n  //   try {\n  //     // Get network provider and web3 instance.\n  //     const web3 = await getWeb3();\n  //\n  //     // Use web3 to get the user's accounts.\n  //     const accounts = await web3.eth.getAccounts();\n  //\n  //     // Get the contract instance.\n  //     const networkId = await web3.eth.net.getId();\n  //     const deployedNetwork = SimpleStorageContract.networks[networkId];\n  //     const instance = new web3.eth.Contract(\n  //       SimpleStorageContract.abi,\n  //       deployedNetwork && deployedNetwork.address,\n  //     );\n  //\n  //     let options = {\n  //       fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n  //       toBlock: 'latest'\n  //     };\n  //\n  //     let options1 = {\n  //       fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n  //     };\n  //\n  //     let listAddress = await instance.getPastEvents('dataStored', options);\n  //\n  //     instance.events.dataStored(options1)\n  // \t\t\t\t\t  .on('data', event => listAddress.push(event));\n  //     const response = await instance.methods.get().call();\n  //\n  //\n  //     // Set web3, accounts, and contract to the state, and then proceed with an\n  //     // example of interacting with the contract's methods.\n  //     this.setState({ storageValue: response, web3, accounts, contract: instance, addresses:listAddress });\n  //   } catch (error) {\n  //     // Catch any errors for any of the above operations.\n  //     alert(\n  //       `Failed to load web3, accounts, or contract. Check console for details.`,\n  //     );\n  //     console.error(error);\n  //   }\n  // };\n  //\n  // runSet = async () => {\n  //   const { accounts, contract} = this.state;\n  //   let valeur=document.getElementById(\"valeur\").value;\n  //   const transac = await contract.methods.set(valeur).send({ from: accounts[0] });\n  //   const response = await contract.methods.get().call();\n  //\n  //\n  //\n  //   console.log(\"l'adresse est celle ci: \" + transac.events.dataStored.returnValues.addr);\n  //   console.log(\"la data est celle ci: \" + transac.events.dataStored.returnValues.data);\n  //   console.log(transac);\n  //\n  //   this.setState({ storageValue: response });\n  //   };\n  //\n  // render() {\n  //   if (!this.state.web3) {\n  //     return <div>Loading Web3, accounts, and contract...</div>;\n  //   }\n  //   return (\n  //     <div className=\"App\">\n  //       <Address addr={this.state.accounts} />        <h1>Good to Go!</h1>\n  //       <p>Your Truffle Box is installed and ready.</p>\n  //       <h2>Smart Contract Example</h2>\n  //       <div>The stored value is: {this.state.storageValue}</div>\n  //       <p>\n  //         Try changing the value by setting it via the input:\n  //       </p>\n  //       <input type=\"text\" id=\"valeur\" />\n  //       <button onClick={this.runSet}>Set the value you wrote inside the blockchain</button>\n  //       <br />\n  //       <p>Here is the addresses that interacted with the contract, and the value they put</p>\n  //       <table>\n  //       {this.state.addresses.map((addresse) => (\n  //         <tr><td>{addresse.returnValues.addr}</td><td>{addresse.returnValues.data}</td></tr>\n  //       ))}\n  //       </table>\n  //     </div>\n  //   );\n  // }\n}\n\nexport default App;","map":{"version":3,"names":["React","Component","SimpleStorageContract","getWeb3","Address","App"],"sources":["/home/hag/www/alyra/vote_dapp/client/src/App.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Address from \"./Address.js\";\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null, addresses: null };\n  //\n  // componentDidMount = async () => {\n  //   try {\n  //     // Get network provider and web3 instance.\n  //     const web3 = await getWeb3();\n  //\n  //     // Use web3 to get the user's accounts.\n  //     const accounts = await web3.eth.getAccounts();\n  //\n  //     // Get the contract instance.\n  //     const networkId = await web3.eth.net.getId();\n  //     const deployedNetwork = SimpleStorageContract.networks[networkId];\n  //     const instance = new web3.eth.Contract(\n  //       SimpleStorageContract.abi,\n  //       deployedNetwork && deployedNetwork.address,\n  //     );\n  //\n  //     let options = {\n  //       fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n  //       toBlock: 'latest'\n  //     };\n  //\n  //     let options1 = {\n  //       fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n  //     };\n  //\n  //     let listAddress = await instance.getPastEvents('dataStored', options);\n  //\n  //     instance.events.dataStored(options1)\n\t// \t\t\t\t\t  .on('data', event => listAddress.push(event));\n  //     const response = await instance.methods.get().call();\n  //\n  //\n  //     // Set web3, accounts, and contract to the state, and then proceed with an\n  //     // example of interacting with the contract's methods.\n  //     this.setState({ storageValue: response, web3, accounts, contract: instance, addresses:listAddress });\n  //   } catch (error) {\n  //     // Catch any errors for any of the above operations.\n  //     alert(\n  //       `Failed to load web3, accounts, or contract. Check console for details.`,\n  //     );\n  //     console.error(error);\n  //   }\n  // };\n  //\n  // runSet = async () => {\n  //   const { accounts, contract} = this.state;\n  //   let valeur=document.getElementById(\"valeur\").value;\n  //   const transac = await contract.methods.set(valeur).send({ from: accounts[0] });\n  //   const response = await contract.methods.get().call();\n  //\n  //\n  //\n  //   console.log(\"l'adresse est celle ci: \" + transac.events.dataStored.returnValues.addr);\n  //   console.log(\"la data est celle ci: \" + transac.events.dataStored.returnValues.data);\n  //   console.log(transac);\n  //\n  //   this.setState({ storageValue: response });\n  //   };\n  //\n  // render() {\n  //   if (!this.state.web3) {\n  //     return <div>Loading Web3, accounts, and contract...</div>;\n  //   }\n  //   return (\n  //     <div className=\"App\">\n  //       <Address addr={this.state.accounts} />        <h1>Good to Go!</h1>\n  //       <p>Your Truffle Box is installed and ready.</p>\n  //       <h2>Smart Contract Example</h2>\n  //       <div>The stored value is: {this.state.storageValue}</div>\n  //       <p>\n  //         Try changing the value by setting it via the input:\n  //       </p>\n  //       <input type=\"text\" id=\"valeur\" />\n  //       <button onClick={this.runSet}>Set the value you wrote inside the blockchain</button>\n  //       <br />\n  //       <p>Here is the addresses that interacted with the contract, and the value they put</p>\n  //       <table>\n  //       {this.state.addresses.map((addresse) => (\n  //         <tr><td>{addresse.returnValues.addr}</td><td>{addresse.returnValues.data}</td></tr>\n  //       ))}\n  //       </table>\n  //     </div>\n  //   );\n  // }\n}\n\nexport default App;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAGA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B,CAC1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACD;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAtF0B;;AAyF5B,eAAeI,GAAf"},"metadata":{},"sourceType":"module"}